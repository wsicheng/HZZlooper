// -*- C++ -*-
#ifndef EGTree_H
#define EGTree_H
#include "Math/LorentzVector.h"
#include "Math/GenVector/PtEtaPhiM4D.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector>
#include <unistd.h>
typedef ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > LorentzVector;

// Generated with command: -t EGTree -n tas -o st -c EGTree -plv /hadoop/cms/store/user/usarica/Offshell_2L2Nu/Worker/output/SinglePhotonEGTnP/SkimTrees/201007/2016D/SingleElectron_Run2016D-17Jul2018-v1_Nominal.root 

using namespace std;
class EGTree {
private:
protected:
  unsigned int index;
  vector<float> *dR_e_g_;
  TBranch *dR_e_g_branch;
  bool dR_e_g_isLoaded;
  vector<float> *electron_dR_genMatch_;
  TBranch *electron_dR_genMatch_branch;
  bool electron_dR_genMatch_isLoaded;
  vector<float> *electron_dxy_;
  TBranch *electron_dxy_branch;
  bool electron_dxy_isLoaded;
  vector<float> *electron_dz_;
  TBranch *electron_dz_branch;
  bool electron_dz_isLoaded;
  vector<float> *electron_eta_;
  TBranch *electron_eta_branch;
  bool electron_eta_isLoaded;
  vector<float> *electron_etaSC_;
  TBranch *electron_etaSC_branch;
  bool electron_etaSC_isLoaded;
  vector<unsigned short> *electron_fid_mask_;
  TBranch *electron_fid_mask_branch;
  bool electron_fid_mask_isLoaded;
  vector<bool> *electron_hasTightCharge_;
  TBranch *electron_hasTightCharge_branch;
  bool electron_hasTightCharge_isLoaded;
  vector<int> *electron_id_;
  TBranch *electron_id_branch;
  bool electron_id_isLoaded;
  vector<int> *electron_id_genMatch_;
  TBranch *electron_id_genMatch_branch;
  bool electron_id_genMatch_isLoaded;
  vector<bool> *electron_is_conversionSafe_;
  TBranch *electron_is_conversionSafe_branch;
  bool electron_is_conversionSafe_isLoaded;
  vector<bool> *electron_is_extraTight_;
  TBranch *electron_is_extraTight_branch;
  bool electron_is_extraTight_isLoaded;
  vector<bool> *electron_is_genMatched_prompt_;
  TBranch *electron_is_genMatched_prompt_branch;
  bool electron_is_genMatched_prompt_isLoaded;
  vector<float> *electron_minDR_electron_;
  TBranch *electron_minDR_electron_branch;
  bool electron_minDR_electron_isLoaded;
  vector<float> *electron_minDR_muon_;
  TBranch *electron_minDR_muon_branch;
  bool electron_minDR_muon_isLoaded;
  vector<float> *electron_minDR_photon_;
  TBranch *electron_minDR_photon_branch;
  bool electron_minDR_photon_isLoaded;
  vector<float> *electron_phi_;
  TBranch *electron_phi_branch;
  bool electron_phi_isLoaded;
  vector<float> *electron_pt_;
  TBranch *electron_pt_branch;
  bool electron_pt_isLoaded;
  vector<float> *eta_eg_;
  TBranch *eta_eg_branch;
  bool eta_eg_isLoaded;
  unsigned int event_NGenPromptParticles_;
  TBranch *event_NGenPromptParticles_branch;
  bool event_NGenPromptParticles_isLoaded;
  unsigned int event_Njets_;
  TBranch *event_Njets_branch;
  bool event_Njets_isLoaded;
  unsigned int event_Njets20_;
  TBranch *event_Njets20_branch;
  bool event_Njets20_isLoaded;
  unsigned int event_Njets20_btagged_;
  TBranch *event_Njets20_btagged_branch;
  bool event_Njets20_btagged_isLoaded;
  unsigned int event_Njets_btagged_;
  TBranch *event_Njets_btagged_branch;
  bool event_Njets_btagged_isLoaded;
  unsigned int event_nvtxs_good_;
  TBranch *event_nvtxs_good_branch;
  bool event_nvtxs_good_isLoaded;
  float event_pTmiss_;
  TBranch *event_pTmiss_branch;
  bool event_pTmiss_isLoaded;
  float event_phimiss_;
  TBranch *event_phimiss_branch;
  bool event_phimiss_isLoaded;
  float event_wgt_;
  TBranch *event_wgt_branch;
  bool event_wgt_isLoaded;
  float event_wgt_SFs_;
  TBranch *event_wgt_SFs_branch;
  bool event_wgt_SFs_isLoaded;
  float genmet_pTmiss_;
  TBranch *genmet_pTmiss_branch;
  bool genmet_pTmiss_isLoaded;
  float genmet_phimiss_;
  TBranch *genmet_phimiss_branch;
  bool genmet_phimiss_isLoaded;
  vector<float> *mass_eg_;
  TBranch *mass_eg_branch;
  bool mass_eg_isLoaded;
  vector<float> *phi_eg_;
  TBranch *phi_eg_branch;
  bool phi_eg_isLoaded;
  vector<float> *photon_MIPTotalEnergy_;
  TBranch *photon_MIPTotalEnergy_branch;
  bool photon_MIPTotalEnergy_isLoaded;
  vector<float> *photon_dR_genMatch_;
  TBranch *photon_dR_genMatch_branch;
  bool photon_dR_genMatch_isLoaded;
  vector<float> *photon_eta_;
  TBranch *photon_eta_branch;
  bool photon_eta_isLoaded;
  vector<float> *photon_etaSC_;
  TBranch *photon_etaSC_branch;
  bool photon_etaSC_isLoaded;
  vector<unsigned short> *photon_fid_mask_;
  TBranch *photon_fid_mask_branch;
  bool photon_fid_mask_isLoaded;
  vector<float> *photon_full5x5_r9_;
  TBranch *photon_full5x5_r9_branch;
  bool photon_full5x5_r9_isLoaded;
  vector<float> *photon_full5x5_sigmaIEtaIEta_;
  TBranch *photon_full5x5_sigmaIEtaIEta_branch;
  bool photon_full5x5_sigmaIEtaIEta_isLoaded;
  vector<float> *photon_full5x5_sigmaIPhiIPhi_;
  TBranch *photon_full5x5_sigmaIPhiIPhi_branch;
  bool photon_full5x5_sigmaIPhiIPhi_isLoaded;
  vector<int> *photon_id_;
  TBranch *photon_id_branch;
  bool photon_id_isLoaded;
  vector<int> *photon_id_genMatch_;
  TBranch *photon_id_genMatch_branch;
  bool photon_id_genMatch_isLoaded;
  vector<bool> *photon_is_METSafe_;
  TBranch *photon_is_METSafe_branch;
  bool photon_is_METSafe_isLoaded;
  vector<bool> *photon_is_PFID_;
  TBranch *photon_is_PFID_branch;
  bool photon_is_PFID_isLoaded;
  vector<bool> *photon_is_beamHaloSafe_;
  TBranch *photon_is_beamHaloSafe_branch;
  bool photon_is_beamHaloSafe_isLoaded;
  vector<bool> *photon_is_conversionSafe_;
  TBranch *photon_is_conversionSafe_branch;
  bool photon_is_conversionSafe_isLoaded;
  vector<bool> *photon_is_genMatched_prompt_;
  TBranch *photon_is_genMatched_prompt_branch;
  bool photon_is_genMatched_prompt_isLoaded;
  vector<bool> *photon_is_inTime_;
  TBranch *photon_is_inTime_branch;
  bool photon_is_inTime_isLoaded;
  vector<bool> *photon_is_spikeSafe_;
  TBranch *photon_is_spikeSafe_branch;
  bool photon_is_spikeSafe_isLoaded;
  vector<float> *photon_minDR_electron_;
  TBranch *photon_minDR_electron_branch;
  bool photon_minDR_electron_isLoaded;
  vector<float> *photon_minDR_muon_;
  TBranch *photon_minDR_muon_branch;
  bool photon_minDR_muon_isLoaded;
  vector<float> *photon_minDR_photon_;
  TBranch *photon_minDR_photon_branch;
  bool photon_minDR_photon_isLoaded;
  vector<float> *photon_phi_;
  TBranch *photon_phi_branch;
  bool photon_phi_isLoaded;
  vector<float> *photon_pt_;
  TBranch *photon_pt_branch;
  bool photon_pt_isLoaded;
  vector<float> *photon_seedTime_;
  TBranch *photon_seedTime_branch;
  bool photon_seedTime_isLoaded;
  vector<float> *pt_eg_;
  TBranch *pt_eg_branch;
  bool pt_eg_isLoaded;
  vector<float> *weight_HLT_Photon120_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon120_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon120_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon165_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon165_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon165_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon175_;
  TBranch *weight_HLT_Photon175_branch;
  bool weight_HLT_Photon175_isLoaded;
  vector<float> *weight_HLT_Photon200_;
  TBranch *weight_HLT_Photon200_branch;
  bool weight_HLT_Photon200_isLoaded;
  vector<float> *weight_HLT_Photon22_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon22_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon22_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon30_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon30_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon30_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon33_;
  TBranch *weight_HLT_Photon33_branch;
  bool weight_HLT_Photon33_isLoaded;
  vector<float> *weight_HLT_Photon36_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon36_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon36_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon50_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon50_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon50_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon75_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon75_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon75_R9Id90_HE10_IsoM_isLoaded;
  vector<float> *weight_HLT_Photon90_R9Id90_HE10_IsoM_;
  TBranch *weight_HLT_Photon90_R9Id90_HE10_IsoM_branch;
  bool weight_HLT_Photon90_R9Id90_HE10_IsoM_isLoaded;
public:
  void Init(TTree *tree);
  void GetEntry(unsigned int idx);
  void LoadAllBranches();
  const vector<float> &dR_e_g();
  const vector<float> &electron_dR_genMatch();
  const vector<float> &electron_dxy();
  const vector<float> &electron_dz();
  const vector<float> &electron_eta();
  const vector<float> &electron_etaSC();
  const vector<unsigned short> &electron_fid_mask();
  const vector<bool> &electron_hasTightCharge();
  const vector<int> &electron_id();
  const vector<int> &electron_id_genMatch();
  const vector<bool> &electron_is_conversionSafe();
  const vector<bool> &electron_is_extraTight();
  const vector<bool> &electron_is_genMatched_prompt();
  const vector<float> &electron_minDR_electron();
  const vector<float> &electron_minDR_muon();
  const vector<float> &electron_minDR_photon();
  const vector<float> &electron_phi();
  const vector<float> &electron_pt();
  const vector<float> &eta_eg();
  const unsigned int &event_NGenPromptParticles();
  const unsigned int &event_Njets();
  const unsigned int &event_Njets20();
  const unsigned int &event_Njets20_btagged();
  const unsigned int &event_Njets_btagged();
  const unsigned int &event_nvtxs_good();
  const float &event_pTmiss();
  const float &event_phimiss();
  const float &event_wgt();
  const float &event_wgt_SFs();
  const float &genmet_pTmiss();
  const float &genmet_phimiss();
  const vector<float> &mass_eg();
  const vector<float> &phi_eg();
  const vector<float> &photon_MIPTotalEnergy();
  const vector<float> &photon_dR_genMatch();
  const vector<float> &photon_eta();
  const vector<float> &photon_etaSC();
  const vector<unsigned short> &photon_fid_mask();
  const vector<float> &photon_full5x5_r9();
  const vector<float> &photon_full5x5_sigmaIEtaIEta();
  const vector<float> &photon_full5x5_sigmaIPhiIPhi();
  const vector<int> &photon_id();
  const vector<int> &photon_id_genMatch();
  const vector<bool> &photon_is_METSafe();
  const vector<bool> &photon_is_PFID();
  const vector<bool> &photon_is_beamHaloSafe();
  const vector<bool> &photon_is_conversionSafe();
  const vector<bool> &photon_is_genMatched_prompt();
  const vector<bool> &photon_is_inTime();
  const vector<bool> &photon_is_spikeSafe();
  const vector<float> &photon_minDR_electron();
  const vector<float> &photon_minDR_muon();
  const vector<float> &photon_minDR_photon();
  const vector<float> &photon_phi();
  const vector<float> &photon_pt();
  const vector<float> &photon_seedTime();
  const vector<float> &pt_eg();
  const vector<float> &weight_HLT_Photon120_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon165_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon175();
  const vector<float> &weight_HLT_Photon200();
  const vector<float> &weight_HLT_Photon22_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon30_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon33();
  const vector<float> &weight_HLT_Photon36_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon50_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon75_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon90_R9Id90_HE10_IsoM();
  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern EGTree st;
#endif

namespace tas {

  const vector<float> &dR_e_g();
  const vector<float> &electron_dR_genMatch();
  const vector<float> &electron_dxy();
  const vector<float> &electron_dz();
  const vector<float> &electron_eta();
  const vector<float> &electron_etaSC();
  const vector<unsigned short> &electron_fid_mask();
  const vector<bool> &electron_hasTightCharge();
  const vector<int> &electron_id();
  const vector<int> &electron_id_genMatch();
  const vector<bool> &electron_is_conversionSafe();
  const vector<bool> &electron_is_extraTight();
  const vector<bool> &electron_is_genMatched_prompt();
  const vector<float> &electron_minDR_electron();
  const vector<float> &electron_minDR_muon();
  const vector<float> &electron_minDR_photon();
  const vector<float> &electron_phi();
  const vector<float> &electron_pt();
  const vector<float> &eta_eg();
  const unsigned int &event_NGenPromptParticles();
  const unsigned int &event_Njets();
  const unsigned int &event_Njets20();
  const unsigned int &event_Njets20_btagged();
  const unsigned int &event_Njets_btagged();
  const unsigned int &event_nvtxs_good();
  const float &event_pTmiss();
  const float &event_phimiss();
  const float &event_wgt();
  const float &event_wgt_SFs();
  const float &genmet_pTmiss();
  const float &genmet_phimiss();
  const vector<float> &mass_eg();
  const vector<float> &phi_eg();
  const vector<float> &photon_MIPTotalEnergy();
  const vector<float> &photon_dR_genMatch();
  const vector<float> &photon_eta();
  const vector<float> &photon_etaSC();
  const vector<unsigned short> &photon_fid_mask();
  const vector<float> &photon_full5x5_r9();
  const vector<float> &photon_full5x5_sigmaIEtaIEta();
  const vector<float> &photon_full5x5_sigmaIPhiIPhi();
  const vector<int> &photon_id();
  const vector<int> &photon_id_genMatch();
  const vector<bool> &photon_is_METSafe();
  const vector<bool> &photon_is_PFID();
  const vector<bool> &photon_is_beamHaloSafe();
  const vector<bool> &photon_is_conversionSafe();
  const vector<bool> &photon_is_genMatched_prompt();
  const vector<bool> &photon_is_inTime();
  const vector<bool> &photon_is_spikeSafe();
  const vector<float> &photon_minDR_electron();
  const vector<float> &photon_minDR_muon();
  const vector<float> &photon_minDR_photon();
  const vector<float> &photon_phi();
  const vector<float> &photon_pt();
  const vector<float> &photon_seedTime();
  const vector<float> &pt_eg();
  const vector<float> &weight_HLT_Photon120_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon165_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon175();
  const vector<float> &weight_HLT_Photon200();
  const vector<float> &weight_HLT_Photon22_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon30_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon33();
  const vector<float> &weight_HLT_Photon36_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon50_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon75_R9Id90_HE10_IsoM();
  const vector<float> &weight_HLT_Photon90_R9Id90_HE10_IsoM();
}
#endif
